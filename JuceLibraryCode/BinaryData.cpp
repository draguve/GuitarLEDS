/* ==================================== JUCER_BINARY_RESOURCE ====================================

   This is an auto-generated file: Any edits you make may be overwritten!

*/

#include <cstring>

namespace BinaryData
{

//================== _kiss_fft_guts.h ==================
static const unsigned char temp_binary_data_0[] =
"/*\r\n"
"Copyright (c) 2003-2010, Mark Borgerding\r\n"
"\r\n"
"All rights reserved.\r\n"
"\r\n"
"Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\r\n"
"\r\n"
"    * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\r\n"
"    * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\r\n"
"    * Neither the author nor the names of any contributors may be used to endorse or promote products derived from this software without specific prior written permission.\r\n"
"\r\n"
"THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO E"
"VENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR"
" BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH D"
"AMAGE.\r\n"
"*/\r\n"
"\r\n"
"/* kiss_fft.h\r\n"
"   defines kiss_fft_scalar as either short or a float type\r\n"
"   and defines\r\n"
"   typedef struct { kiss_fft_scalar r; kiss_fft_scalar i; }kiss_fft_cpx; */\r\n"
"#include \"kiss_fft.h\"\r\n"
"#include <limits.h>\r\n"
"\r\n"
"#define MAXFACTORS 32\r\n"
"/* e.g. an fft of length 128 has 4 factors \r\n"
" as far as kissfft is concerned\r\n"
" 4*4*4*2\r\n"
" */\r\n"
"\r\n"
"struct kiss_fft_state{\r\n"
"    int nfft;\r\n"
"    int inverse;\r\n"
"    int factors[2*MAXFACTORS];\r\n"
"    kiss_fft_cpx twiddles[1];\r\n"
"};\r\n"
"\r\n"
"/*\r\n"
"  Explanation of macros dealing with complex math:\r\n"
"\r\n"
"   C_MUL(m,a,b)         : m = a*b\r\n"
"   C_FIXDIV( c , div )  : if a fixed point impl., c /= div. noop otherwise\r\n"
"   C_SUB( res, a,b)     : res = a - b\r\n"
"   C_SUBFROM( res , a)  : res -= a\r\n"
"   C_ADDTO( res , a)    : res += a\r\n"
" * */\r\n"
"#ifdef FIXED_POINT\r\n"
"#if (FIXED_POINT==32)\r\n"
"# define FRACBITS 31\r\n"
"# define SAMPPROD int64_t\r\n"
"#define SAMP_MAX 2147483647\r\n"
"#else\r\n"
"# define FRACBITS 15\r\n"
"# define SAMPPROD int32_t \r\n"
"#define SAMP_MAX 32767\r\n"
"#endif\r\n"
"\r\n"
"#define SAMP_MIN -SAMP_MAX\r\n"
"\r\n"
"#if defined(CHECK_OVERFLOW)\r\n"
"#  define CHECK_OVERFLOW_OP(a,op,b)  \\\r\n"
"\tif ( (SAMPPROD)(a) op (SAMPPROD)(b) > SAMP_MAX || (SAMPPROD)(a) op (SAMPPROD)(b) < SAMP_MIN ) { \\\r\n"
"\t\tfprintf(stderr,\"WARNING:overflow @ \" __FILE__ \"(%d): (%d \" #op\" %d) = %ld\\n\",__LINE__,(a),(b),(SAMPPROD)(a) op (SAMPPROD)(b) );  }\r\n"
"#endif\r\n"
"\r\n"
"\r\n"
"#   define smul(a,b) ( (SAMPPROD)(a)*(b) )\r\n"
"#   define sround( x )  (kiss_fft_scalar)( ( (x) + (1<<(FRACBITS-1)) ) >> FRACBITS )\r\n"
"\r\n"
"#   define S_MUL(a,b) sround( smul(a,b) )\r\n"
"\r\n"
"#   define C_MUL(m,a,b) \\\r\n"
"      do{ (m).r = sround( smul((a).r,(b).r) - smul((a).i,(b).i) ); \\\r\n"
"          (m).i = sround( smul((a).r,(b).i) + smul((a).i,(b).r) ); }while(0)\r\n"
"\r\n"
"#   define DIVSCALAR(x,k) \\\r\n"
"\t(x) = sround( smul(  x, SAMP_MAX/k ) )\r\n"
"\r\n"
"#   define C_FIXDIV(c,div) \\\r\n"
"\tdo {    DIVSCALAR( (c).r , div);  \\\r\n"
"\t\tDIVSCALAR( (c).i  , div); }while (0)\r\n"
"\r\n"
"#   define C_MULBYSCALAR( c, s ) \\\r\n"
"    do{ (c).r =  sround( smul( (c).r , s ) ) ;\\\r\n"
"        (c).i =  sround( smul( (c).i , s ) ) ; }while(0)\r\n"
"\r\n"
"#else  /* not FIXED_POINT*/\r\n"
"\r\n"
"#   define S_MUL(a,b) ( (a)*(b) )\r\n"
"#define C_MUL(m,a,b) \\\r\n"
"    do{ (m).r = (a).r*(b).r - (a).i*(b).i;\\\r\n"
"        (m).i = (a).r*(b).i + (a).i*(b).r; }while(0)\r\n"
"#   define C_FIXDIV(c,div) /* NOOP */\r\n"
"#   define C_MULBYSCALAR( c, s ) \\\r\n"
"    do{ (c).r *= (s);\\\r\n"
"        (c).i *= (s); }while(0)\r\n"
"#endif\r\n"
"\r\n"
"#ifndef CHECK_OVERFLOW_OP\r\n"
"#  define CHECK_OVERFLOW_OP(a,op,b) /* noop */\r\n"
"#endif\r\n"
"\r\n"
"#define  C_ADD( res, a,b)\\\r\n"
"    do { \\\r\n"
"\t    CHECK_OVERFLOW_OP((a).r,+,(b).r)\\\r\n"
"\t    CHECK_OVERFLOW_OP((a).i,+,(b).i)\\\r\n"
"\t    (res).r=(a).r+(b).r;  (res).i=(a).i+(b).i; \\\r\n"
"    }while(0)\r\n"
"#define  C_SUB( res, a,b)\\\r\n"
"    do { \\\r\n"
"\t    CHECK_OVERFLOW_OP((a).r,-,(b).r)\\\r\n"
"\t    CHECK_OVERFLOW_OP((a).i,-,(b).i)\\\r\n"
"\t    (res).r=(a).r-(b).r;  (res).i=(a).i-(b).i; \\\r\n"
"    }while(0)\r\n"
"#define C_ADDTO( res , a)\\\r\n"
"    do { \\\r\n"
"\t    CHECK_OVERFLOW_OP((res).r,+,(a).r)\\\r\n"
"\t    CHECK_OVERFLOW_OP((res).i,+,(a).i)\\\r\n"
"\t    (res).r += (a).r;  (res).i += (a).i;\\\r\n"
"    }while(0)\r\n"
"\r\n"
"#define C_SUBFROM( res , a)\\\r\n"
"    do {\\\r\n"
"\t    CHECK_OVERFLOW_OP((res).r,-,(a).r)\\\r\n"
"\t    CHECK_OVERFLOW_OP((res).i,-,(a).i)\\\r\n"
"\t    (res).r -= (a).r;  (res).i -= (a).i; \\\r\n"
"    }while(0)\r\n"
"\r\n"
"\r\n"
"#ifdef FIXED_POINT\r\n"
"#  define KISS_FFT_COS(phase)  floor(.5+SAMP_MAX * cos (phase))\r\n"
"#  define KISS_FFT_SIN(phase)  floor(.5+SAMP_MAX * sin (phase))\r\n"
"#  define HALF_OF(x) ((x)>>1)\r\n"
"#elif defined(USE_SIMD)\r\n"
"#  define KISS_FFT_COS(phase) _mm_set1_ps( cos(phase) )\r\n"
"#  define KISS_FFT_SIN(phase) _mm_set1_ps( sin(phase) )\r\n"
"#  define HALF_OF(x) ((x)*_mm_set1_ps(.5))\r\n"
"#else\r\n"
"#  define KISS_FFT_COS(phase) (kiss_fft_scalar) cos(phase)\r\n"
"#  define KISS_FFT_SIN(phase) (kiss_fft_scalar) sin(phase)\r\n"
"#  define HALF_OF(x) ((x)*.5)\r\n"
"#endif\r\n"
"\r\n"
"#define  kf_cexp(x,phase) \\\r\n"
"\tdo{ \\\r\n"
"\t\t(x)->r = KISS_FFT_COS(phase);\\\r\n"
"\t\t(x)->i = KISS_FFT_SIN(phase);\\\r\n"
"\t}while(0)\r\n"
"\r\n"
"\r\n"
"/* a debugging function */\r\n"
"#define pcpx(c)\\\r\n"
"    fprintf(stderr,\"%g + %gi\\n\",(double)((c)->r),(double)((c)->i) )\r\n"
"\r\n"
"\r\n"
"#ifdef KISS_FFT_USE_ALLOCA\r\n"
"// define this to allow use of alloca instead of malloc for temporary buffers\r\n"
"// Temporary buffers are used in two case: \r\n"
"// 1. FFT sizes that have \"bad\" factors. i.e. not 2,3 and 5\r\n"
"// 2. \"in-place\" FFTs.  Notice the quotes, since kissfft does not really do an in-place transform.\r\n"
"#include <alloca.h>\r\n"
"#define  KISS_FFT_TMP_ALLOC(nbytes) alloca(nbytes)\r\n"
"#define  KISS_FFT_TMP_FREE(ptr) \r\n"
"#else\r\n"
"#define  KISS_FFT_TMP_ALLOC(nbytes) KISS_FFT_MALLOC(nbytes)\r\n"
"#define  KISS_FFT_TMP_FREE(ptr) KISS_FFT_FREE(ptr)\r\n"
"#endif\r\n";

const char* _kiss_fft_guts_h = (const char*) temp_binary_data_0;

//================== kiss_fft.c ==================
static const unsigned char temp_binary_data_1[] =
"/*\r\n"
"Copyright (c) 2003-2010, Mark Borgerding\r\n"
"\r\n"
"All rights reserved.\r\n"
"\r\n"
"Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\r\n"
"\r\n"
"    * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\r\n"
"    * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\r\n"
"    * Neither the author nor the names of any contributors may be used to endorse or promote products derived from this software without specific prior written permission.\r\n"
"\r\n"
"THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO E"
"VENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR"
" BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH D"
"AMAGE.\r\n"
"*/\r\n"
"\r\n"
"\r\n"
"#include \"_kiss_fft_guts.h\"\r\n"
"/* The guts header contains all the multiplication and addition macros that are defined for\r\n"
" fixed or floating point complex numbers.  It also delares the kf_ internal functions.\r\n"
" */\r\n"
"\r\n"
"static void kf_bfly2(\r\n"
"        kiss_fft_cpx * Fout,\r\n"
"        const size_t fstride,\r\n"
"        const kiss_fft_cfg st,\r\n"
"        int m\r\n"
"        )\r\n"
"{\r\n"
"    kiss_fft_cpx * Fout2;\r\n"
"    kiss_fft_cpx * tw1 = st->twiddles;\r\n"
"    kiss_fft_cpx t;\r\n"
"    Fout2 = Fout + m;\r\n"
"    do{\r\n"
"        C_FIXDIV(*Fout,2); C_FIXDIV(*Fout2,2);\r\n"
"\r\n"
"        C_MUL (t,  *Fout2 , *tw1);\r\n"
"        tw1 += fstride;\r\n"
"        C_SUB( *Fout2 ,  *Fout , t );\r\n"
"        C_ADDTO( *Fout ,  t );\r\n"
"        ++Fout2;\r\n"
"        ++Fout;\r\n"
"    }while (--m);\r\n"
"}\r\n"
"\r\n"
"static void kf_bfly4(\r\n"
"        kiss_fft_cpx * Fout,\r\n"
"        const size_t fstride,\r\n"
"        const kiss_fft_cfg st,\r\n"
"        const size_t m\r\n"
"        )\r\n"
"{\r\n"
"    kiss_fft_cpx *tw1,*tw2,*tw3;\r\n"
"    kiss_fft_cpx scratch[6];\r\n"
"    size_t k=m;\r\n"
"    const size_t m2=2*m;\r\n"
"    const size_t m3=3*m;\r\n"
"\r\n"
"\r\n"
"    tw3 = tw2 = tw1 = st->twiddles;\r\n"
"\r\n"
"    do {\r\n"
"        C_FIXDIV(*Fout,4); C_FIXDIV(Fout[m],4); C_FIXDIV(Fout[m2],4); C_FIXDIV(Fout[m3],4);\r\n"
"\r\n"
"        C_MUL(scratch[0],Fout[m] , *tw1 );\r\n"
"        C_MUL(scratch[1],Fout[m2] , *tw2 );\r\n"
"        C_MUL(scratch[2],Fout[m3] , *tw3 );\r\n"
"\r\n"
"        C_SUB( scratch[5] , *Fout, scratch[1] );\r\n"
"        C_ADDTO(*Fout, scratch[1]);\r\n"
"        C_ADD( scratch[3] , scratch[0] , scratch[2] );\r\n"
"        C_SUB( scratch[4] , scratch[0] , scratch[2] );\r\n"
"        C_SUB( Fout[m2], *Fout, scratch[3] );\r\n"
"        tw1 += fstride;\r\n"
"        tw2 += fstride*2;\r\n"
"        tw3 += fstride*3;\r\n"
"        C_ADDTO( *Fout , scratch[3] );\r\n"
"\r\n"
"        if(st->inverse) {\r\n"
"            Fout[m].r = scratch[5].r - scratch[4].i;\r\n"
"            Fout[m].i = scratch[5].i + scratch[4].r;\r\n"
"            Fout[m3].r = scratch[5].r + scratch[4].i;\r\n"
"            Fout[m3].i = scratch[5].i - scratch[4].r;\r\n"
"        }else{\r\n"
"            Fout[m].r = scratch[5].r + scratch[4].i;\r\n"
"            Fout[m].i = scratch[5].i - scratch[4].r;\r\n"
"            Fout[m3].r = scratch[5].r - scratch[4].i;\r\n"
"            Fout[m3].i = scratch[5].i + scratch[4].r;\r\n"
"        }\r\n"
"        ++Fout;\r\n"
"    }while(--k);\r\n"
"}\r\n"
"\r\n"
"static void kf_bfly3(\r\n"
"         kiss_fft_cpx * Fout,\r\n"
"         const size_t fstride,\r\n"
"         const kiss_fft_cfg st,\r\n"
"         size_t m\r\n"
"         )\r\n"
"{\r\n"
"     size_t k=m;\r\n"
"     const size_t m2 = 2*m;\r\n"
"     kiss_fft_cpx *tw1,*tw2;\r\n"
"     kiss_fft_cpx scratch[5];\r\n"
"     kiss_fft_cpx epi3;\r\n"
"     epi3 = st->twiddles[fstride*m];\r\n"
"\r\n"
"     tw1=tw2=st->twiddles;\r\n"
"\r\n"
"     do{\r\n"
"         C_FIXDIV(*Fout,3); C_FIXDIV(Fout[m],3); C_FIXDIV(Fout[m2],3);\r\n"
"\r\n"
"         C_MUL(scratch[1],Fout[m] , *tw1);\r\n"
"         C_MUL(scratch[2],Fout[m2] , *tw2);\r\n"
"\r\n"
"         C_ADD(scratch[3],scratch[1],scratch[2]);\r\n"
"         C_SUB(scratch[0],scratch[1],scratch[2]);\r\n"
"         tw1 += fstride;\r\n"
"         tw2 += fstride*2;\r\n"
"\r\n"
"         Fout[m].r = Fout->r - HALF_OF(scratch[3].r);\r\n"
"         Fout[m].i = Fout->i - HALF_OF(scratch[3].i);\r\n"
"\r\n"
"         C_MULBYSCALAR( scratch[0] , epi3.i );\r\n"
"\r\n"
"         C_ADDTO(*Fout,scratch[3]);\r\n"
"\r\n"
"         Fout[m2].r = Fout[m].r + scratch[0].i;\r\n"
"         Fout[m2].i = Fout[m].i - scratch[0].r;\r\n"
"\r\n"
"         Fout[m].r -= scratch[0].i;\r\n"
"         Fout[m].i += scratch[0].r;\r\n"
"\r\n"
"         ++Fout;\r\n"
"     }while(--k);\r\n"
"}\r\n"
"\r\n"
"static void kf_bfly5(\r\n"
"        kiss_fft_cpx * Fout,\r\n"
"        const size_t fstride,\r\n"
"        const kiss_fft_cfg st,\r\n"
"        int m\r\n"
"        )\r\n"
"{\r\n"
"    kiss_fft_cpx *Fout0,*Fout1,*Fout2,*Fout3,*Fout4;\r\n"
"    int u;\r\n"
"    kiss_fft_cpx scratch[13];\r\n"
"    kiss_fft_cpx * twiddles = st->twiddles;\r\n"
"    kiss_fft_cpx *tw;\r\n"
"    kiss_fft_cpx ya,yb;\r\n"
"    ya = twiddles[fstride*m];\r\n"
"    yb = twiddles[fstride*2*m];\r\n"
"\r\n"
"    Fout0=Fout;\r\n"
"    Fout1=Fout0+m;\r\n"
"    Fout2=Fout0+2*m;\r\n"
"    Fout3=Fout0+3*m;\r\n"
"    Fout4=Fout0+4*m;\r\n"
"\r\n"
"    tw=st->twiddles;\r\n"
"    for ( u=0; u<m; ++u ) {\r\n"
"        C_FIXDIV( *Fout0,5); C_FIXDIV( *Fout1,5); C_FIXDIV( *Fout2,5); C_FIXDIV( *Fout3,5); C_FIXDIV( *Fout4,5);\r\n"
"        scratch[0] = *Fout0;\r\n"
"\r\n"
"        C_MUL(scratch[1] ,*Fout1, tw[u*fstride]);\r\n"
"        C_MUL(scratch[2] ,*Fout2, tw[2*u*fstride]);\r\n"
"        C_MUL(scratch[3] ,*Fout3, tw[3*u*fstride]);\r\n"
"        C_MUL(scratch[4] ,*Fout4, tw[4*u*fstride]);\r\n"
"\r\n"
"        C_ADD( scratch[7],scratch[1],scratch[4]);\r\n"
"        C_SUB( scratch[10],scratch[1],scratch[4]);\r\n"
"        C_ADD( scratch[8],scratch[2],scratch[3]);\r\n"
"        C_SUB( scratch[9],scratch[2],scratch[3]);\r\n"
"\r\n"
"        Fout0->r += scratch[7].r + scratch[8].r;\r\n"
"        Fout0->i += scratch[7].i + scratch[8].i;\r\n"
"\r\n"
"        scratch[5].r = scratch[0].r + S_MUL(scratch[7].r,ya.r) + S_MUL(scratch[8].r,yb.r);\r\n"
"        scratch[5].i = scratch[0].i + S_MUL(scratch[7].i,ya.r) + S_MUL(scratch[8].i,yb.r);\r\n"
"\r\n"
"        scratch[6].r =  S_MUL(scratch[10].i,ya.i) + S_MUL(scratch[9].i,yb.i);\r\n"
"        scratch[6].i = -S_MUL(scratch[10].r,ya.i) - S_MUL(scratch[9].r,yb.i);\r\n"
"\r\n"
"        C_SUB(*Fout1,scratch[5],scratch[6]);\r\n"
"        C_ADD(*Fout4,scratch[5],scratch[6]);\r\n"
"\r\n"
"        scratch[11].r = scratch[0].r + S_MUL(scratch[7].r,yb.r) + S_MUL(scratch[8].r,ya.r);\r\n"
"        scratch[11].i = scratch[0].i + S_MUL(scratch[7].i,yb.r) + S_MUL(scratch[8].i,ya.r);\r\n"
"        scratch[12].r = - S_MUL(scratch[10].i,yb.i) + S_MUL(scratch[9].i,ya.i);\r\n"
"        scratch[12].i = S_MUL(scratch[10].r,yb.i) - S_MUL(scratch[9].r,ya.i);\r\n"
"\r\n"
"        C_ADD(*Fout2,scratch[11],scratch[12]);\r\n"
"        C_SUB(*Fout3,scratch[11],scratch[12]);\r\n"
"\r\n"
"        ++Fout0;++Fout1;++Fout2;++Fout3;++Fout4;\r\n"
"    }\r\n"
"}\r\n"
"\r\n"
"/* perform the butterfly for one stage of a mixed radix FFT */\r\n"
"static void kf_bfly_generic(\r\n"
"        kiss_fft_cpx * Fout,\r\n"
"        const size_t fstride,\r\n"
"        const kiss_fft_cfg st,\r\n"
"        int m,\r\n"
"        int p\r\n"
"        )\r\n"
"{\r\n"
"    int u,k,q1,q;\r\n"
"    kiss_fft_cpx * twiddles = st->twiddles;\r\n"
"    kiss_fft_cpx t;\r\n"
"    int Norig = st->nfft;\r\n"
"\r\n"
"    kiss_fft_cpx * scratch = (kiss_fft_cpx*)KISS_FFT_TMP_ALLOC(sizeof(kiss_fft_cpx)*p);\r\n"
"\r\n"
"    for ( u=0; u<m; ++u ) {\r\n"
"        k=u;\r\n"
"        for ( q1=0 ; q1<p ; ++q1 ) {\r\n"
"            scratch[q1] = Fout[ k  ];\r\n"
"            C_FIXDIV(scratch[q1],p);\r\n"
"            k += m;\r\n"
"        }\r\n"
"\r\n"
"        k=u;\r\n"
"        for ( q1=0 ; q1<p ; ++q1 ) {\r\n"
"            int twidx=0;\r\n"
"            Fout[ k ] = scratch[0];\r\n"
"            for (q=1;q<p;++q ) {\r\n"
"                twidx += fstride * k;\r\n"
"                if (twidx>=Norig) twidx-=Norig;\r\n"
"                C_MUL(t,scratch[q] , twiddles[twidx] );\r\n"
"                C_ADDTO( Fout[ k ] ,t);\r\n"
"            }\r\n"
"            k += m;\r\n"
"        }\r\n"
"    }\r\n"
"    KISS_FFT_TMP_FREE(scratch);\r\n"
"}\r\n"
"\r\n"
"static\r\n"
"void kf_work(\r\n"
"        kiss_fft_cpx * Fout,\r\n"
"        const kiss_fft_cpx * f,\r\n"
"        const size_t fstride,\r\n"
"        int in_stride,\r\n"
"        int * factors,\r\n"
"        const kiss_fft_cfg st\r\n"
"        )\r\n"
"{\r\n"
"    kiss_fft_cpx * Fout_beg=Fout;\r\n"
"    const int p=*factors++; /* the radix  */\r\n"
"    const int m=*factors++; /* stage's fft length/p */\r\n"
"    const kiss_fft_cpx * Fout_end = Fout + p*m;\r\n"
"\r\n"
"#ifdef _OPENMP\r\n"
"    // use openmp extensions at the \r\n"
"    // top-level (not recursive)\r\n"
"    if (fstride==1 && p<=5)\r\n"
"    {\r\n"
"        int k;\r\n"
"\r\n"
"        // execute the p different work units in different threads\r\n"
"#       pragma omp parallel for\r\n"
"        for (k=0;k<p;++k) \r\n"
"            kf_work( Fout +k*m, f+ fstride*in_stride*k,fstride*p,in_stride,factors,st);\r\n"
"        // all threads have joined by this point\r\n"
"\r\n"
"        switch (p) {\r\n"
"            case 2: kf_bfly2(Fout,fstride,st,m); break;\r\n"
"            case 3: kf_bfly3(Fout,fstride,st,m); break; \r\n"
"            case 4: kf_bfly4(Fout,fstride,st,m); break;\r\n"
"            case 5: kf_bfly5(Fout,fstride,st,m); break; \r\n"
"            default: kf_bfly_generic(Fout,fstride,st,m,p); break;\r\n"
"        }\r\n"
"        return;\r\n"
"    }\r\n"
"#endif\r\n"
"\r\n"
"    if (m==1) {\r\n"
"        do{\r\n"
"            *Fout = *f;\r\n"
"            f += fstride*in_stride;\r\n"
"        }while(++Fout != Fout_end );\r\n"
"    }else{\r\n"
"        do{\r\n"
"            // recursive call:\r\n"
"            // DFT of size m*p performed by doing\r\n"
"            // p instances of smaller DFTs of size m, \r\n"
"            // each one takes a decimated version of the input\r\n"
"            kf_work( Fout , f, fstride*p, in_stride, factors,st);\r\n"
"            f += fstride*in_stride;\r\n"
"        }while( (Fout += m) != Fout_end );\r\n"
"    }\r\n"
"\r\n"
"    Fout=Fout_beg;\r\n"
"\r\n"
"    // recombine the p smaller DFTs \r\n"
"    switch (p) {\r\n"
"        case 2: kf_bfly2(Fout,fstride,st,m); break;\r\n"
"        case 3: kf_bfly3(Fout,fstride,st,m); break; \r\n"
"        case 4: kf_bfly4(Fout,fstride,st,m); break;\r\n"
"        case 5: kf_bfly5(Fout,fstride,st,m); break; \r\n"
"        default: kf_bfly_generic(Fout,fstride,st,m,p); break;\r\n"
"    }\r\n"
"}\r\n"
"\r\n"
"/*  facbuf is populated by p1,m1,p2,m2, ...\r\n"
"    where \r\n"
"    p[i] * m[i] = m[i-1]\r\n"
"    m0 = n                  */\r\n"
"static \r\n"
"void kf_factor(int n,int * facbuf)\r\n"
"{\r\n"
"    int p=4;\r\n"
"    double floor_sqrt;\r\n"
"    floor_sqrt = floor( sqrt((double)n) );\r\n"
"\r\n"
"    /*factor out powers of 4, powers of 2, then any remaining primes */\r\n"
"    do {\r\n"
"        while (n % p) {\r\n"
"            switch (p) {\r\n"
"                case 4: p = 2; break;\r\n"
"                case 2: p = 3; break;\r\n"
"                default: p += 2; break;\r\n"
"            }\r\n"
"            if (p > floor_sqrt)\r\n"
"                p = n;          /* no more factors, skip to end */\r\n"
"        }\r\n"
"        n /= p;\r\n"
"        *facbuf++ = p;\r\n"
"        *facbuf++ = n;\r\n"
"    } while (n > 1);\r\n"
"}\r\n"
"\r\n"
"/*\r\n"
" *\r\n"
" * User-callable function to allocate all necessary storage space for the fft.\r\n"
" *\r\n"
" * The return value is a contiguous block of memory, allocated with malloc.  As such,\r\n"
" * It can be freed with free(), rather than a kiss_fft-specific function.\r\n"
" * */\r\n"
"kiss_fft_cfg kiss_fft_alloc(int nfft,int inverse_fft,void * mem,size_t * lenmem )\r\n"
"{\r\n"
"    kiss_fft_cfg st=NULL;\r\n"
"    size_t memneeded = sizeof(struct kiss_fft_state)\r\n"
"        + sizeof(kiss_fft_cpx)*(nfft-1); /* twiddle factors*/\r\n"
"\r\n"
"    if ( lenmem==NULL ) {\r\n"
"        st = ( kiss_fft_cfg)KISS_FFT_MALLOC( memneeded );\r\n"
"    }else{\r\n"
"        if (mem != NULL && *lenmem >= memneeded)\r\n"
"            st = (kiss_fft_cfg)mem;\r\n"
"        *lenmem = memneeded;\r\n"
"    }\r\n"
"    if (st) {\r\n"
"        int i;\r\n"
"        st->nfft=nfft;\r\n"
"        st->inverse = inverse_fft;\r\n"
"\r\n"
"        for (i=0;i<nfft;++i) {\r\n"
"            const double pi=3.141592653589793238462643383279502884197169399375105820974944;\r\n"
"            double phase = -2*pi*i / nfft;\r\n"
"            if (st->inverse)\r\n"
"                phase *= -1;\r\n"
"            kf_cexp(st->twiddles+i, phase );\r\n"
"        }\r\n"
"\r\n"
"        kf_factor(nfft,st->factors);\r\n"
"    }\r\n"
"    return st;\r\n"
"}\r\n"
"\r\n"
"\r\n"
"void kiss_fft_stride(kiss_fft_cfg st,const kiss_fft_cpx *fin,kiss_fft_cpx *fout,int in_stride)\r\n"
"{\r\n"
"    if (fin == fout) {\r\n"
"        //NOTE: this is not really an in-place FFT algorithm.\r\n"
"        //It just performs an out-of-place FFT into a temp buffer\r\n"
"        kiss_fft_cpx * tmpbuf = (kiss_fft_cpx*)KISS_FFT_TMP_ALLOC( sizeof(kiss_fft_cpx)*st->nfft);\r\n"
"        kf_work(tmpbuf,fin,1,in_stride, st->factors,st);\r\n"
"        memcpy(fout,tmpbuf,sizeof(kiss_fft_cpx)*st->nfft);\r\n"
"        KISS_FFT_TMP_FREE(tmpbuf);\r\n"
"    }else{\r\n"
"        kf_work( fout, fin, 1,in_stride, st->factors,st );\r\n"
"    }\r\n"
"}\r\n"
"\r\n"
"void kiss_fft(kiss_fft_cfg cfg,const kiss_fft_cpx *fin,kiss_fft_cpx *fout)\r\n"
"{\r\n"
"    kiss_fft_stride(cfg,fin,fout,1);\r\n"
"}\r\n"
"\r\n"
"\r\n"
"void kiss_fft_cleanup(void)\r\n"
"{\r\n"
"    // nothing needed any more\r\n"
"}\r\n"
"\r\n"
"int kiss_fft_next_fast_size(int n)\r\n"
"{\r\n"
"    while(1) {\r\n"
"        int m=n;\r\n"
"        while ( (m%2) == 0 ) m/=2;\r\n"
"        while ( (m%3) == 0 ) m/=3;\r\n"
"        while ( (m%5) == 0 ) m/=5;\r\n"
"        if (m<=1)\r\n"
"            break; /* n is completely factorable by twos, threes, and fives */\r\n"
"        n++;\r\n"
"    }\r\n"
"    return n;\r\n"
"}\r\n";

const char* kiss_fft_c = (const char*) temp_binary_data_1;

//================== kiss_fft.h ==================
static const unsigned char temp_binary_data_2[] =
"#ifndef KISS_FFT_H\r\n"
"#define KISS_FFT_H\r\n"
"\r\n"
"#include <stdlib.h>\r\n"
"#include <stdio.h>\r\n"
"#include <math.h>\r\n"
"#include <string.h>\r\n"
"\r\n"
"#ifdef __cplusplus\r\n"
"extern \"C\" {\r\n"
"#endif\r\n"
"\r\n"
"/*\r\n"
" ATTENTION!\r\n"
" If you would like a :\r\n"
" -- a utility that will handle the caching of fft objects\r\n"
" -- real-only (no imaginary time component ) FFT\r\n"
" -- a multi-dimensional FFT\r\n"
" -- a command-line utility to perform ffts\r\n"
" -- a command-line utility to perform fast-convolution filtering\r\n"
"\r\n"
" Then see kfc.h kiss_fftr.h kiss_fftnd.h fftutil.c kiss_fastfir.c\r\n"
"  in the tools/ directory.\r\n"
"*/\r\n"
"\r\n"
"#ifdef USE_SIMD\r\n"
"# include <xmmintrin.h>\r\n"
"# define kiss_fft_scalar __m128\r\n"
"#define KISS_FFT_MALLOC(nbytes) _mm_malloc(nbytes,16)\r\n"
"#define KISS_FFT_FREE _mm_free\r\n"
"#else\t\r\n"
"#define KISS_FFT_MALLOC malloc\r\n"
"#define KISS_FFT_FREE free\r\n"
"#endif\t\r\n"
"\r\n"
"\r\n"
"#ifdef FIXED_POINT\r\n"
"#include <sys/types.h>\t\r\n"
"# if (FIXED_POINT == 32)\r\n"
"#  define kiss_fft_scalar int32_t\r\n"
"# else\t\r\n"
"#  define kiss_fft_scalar int16_t\r\n"
"# endif\r\n"
"#else\r\n"
"# ifndef kiss_fft_scalar\r\n"
"/*  default is float */\r\n"
"#   define kiss_fft_scalar float\r\n"
"# endif\r\n"
"#endif\r\n"
"\r\n"
"typedef struct {\r\n"
"    kiss_fft_scalar r;\r\n"
"    kiss_fft_scalar i;\r\n"
"}kiss_fft_cpx;\r\n"
"\r\n"
"typedef struct kiss_fft_state* kiss_fft_cfg;\r\n"
"\r\n"
"/* \r\n"
" *  kiss_fft_alloc\r\n"
" *  \r\n"
" *  Initialize a FFT (or IFFT) algorithm's cfg/state buffer.\r\n"
" *\r\n"
" *  typical usage:      kiss_fft_cfg mycfg=kiss_fft_alloc(1024,0,NULL,NULL);\r\n"
" *\r\n"
" *  The return value from fft_alloc is a cfg buffer used internally\r\n"
" *  by the fft routine or NULL.\r\n"
" *\r\n"
" *  If lenmem is NULL, then kiss_fft_alloc will allocate a cfg buffer using malloc.\r\n"
" *  The returned value should be free()d when done to avoid memory leaks.\r\n"
" *  \r\n"
" *  The state can be placed in a user supplied buffer 'mem':\r\n"
" *  If lenmem is not NULL and mem is not NULL and *lenmem is large enough,\r\n"
" *      then the function places the cfg in mem and the size used in *lenmem\r\n"
" *      and returns mem.\r\n"
" *  \r\n"
" *  If lenmem is not NULL and ( mem is NULL or *lenmem is not large enough),\r\n"
" *      then the function returns NULL and places the minimum cfg \r\n"
" *      buffer size in *lenmem.\r\n"
" * */\r\n"
"\r\n"
"kiss_fft_cfg kiss_fft_alloc(int nfft,int inverse_fft,void * mem,size_t * lenmem); \r\n"
"\r\n"
"/*\r\n"
" * kiss_fft(cfg,in_out_buf)\r\n"
" *\r\n"
" * Perform an FFT on a complex input buffer.\r\n"
" * for a forward FFT,\r\n"
" * fin should be  f[0] , f[1] , ... ,f[nfft-1]\r\n"
" * fout will be   F[0] , F[1] , ... ,F[nfft-1]\r\n"
" * Note that each element is complex and can be accessed like\r\n"
"    f[k].r and f[k].i\r\n"
" * */\r\n"
"void kiss_fft(kiss_fft_cfg cfg,const kiss_fft_cpx *fin,kiss_fft_cpx *fout);\r\n"
"\r\n"
"/*\r\n"
" A more generic version of the above function. It reads its input from every Nth sample.\r\n"
" * */\r\n"
"void kiss_fft_stride(kiss_fft_cfg cfg,const kiss_fft_cpx *fin,kiss_fft_cpx *fout,int fin_stride);\r\n"
"\r\n"
"/* If kiss_fft_alloc allocated a buffer, it is one contiguous \r\n"
"   buffer and can be simply free()d when no longer needed*/\r\n"
"#define kiss_fft_free free\r\n"
"\r\n"
"/*\r\n"
" Cleans up some memory that gets managed internally. Not necessary to call, but it might clean up \r\n"
" your compiler output to call this before you exit.\r\n"
"*/\r\n"
"void kiss_fft_cleanup(void);\r\n"
"\t\r\n"
"\r\n"
"/*\r\n"
" * Returns the smallest integer k, such that k>=n and k has only \"fast\" factors (2,3,5)\r\n"
" */\r\n"
"int kiss_fft_next_fast_size(int n);\r\n"
"\r\n"
"/* for real ffts, we need an even size */\r\n"
"#define kiss_fftr_next_fast_size_real(n) \\\r\n"
"        (kiss_fft_next_fast_size( ((n)+1)>>1)<<1)\r\n"
"\r\n"
"#ifdef __cplusplus\r\n"
"} \r\n"
"#endif\r\n"
"\r\n"
"#endif\r\n";

const char* kiss_fft_h = (const char*) temp_binary_data_2;

//================== kissfft.hh ==================
static const unsigned char temp_binary_data_3[] =
"#ifndef KISSFFT_CLASS_HH\r\n"
"#include <complex>\r\n"
"#include <vector>\r\n"
"\r\n"
"namespace kissfft_utils {\r\n"
"\r\n"
"template <typename T_scalar>\r\n"
"struct traits\r\n"
"{\r\n"
"    typedef T_scalar scalar_type;\r\n"
"    typedef std::complex<scalar_type> cpx_type;\r\n"
"    void fill_twiddles( std::complex<T_scalar> * dst ,int nfft,bool inverse)\r\n"
"    {\r\n"
"        T_scalar phinc =  (inverse?2:-2)* acos( (T_scalar) -1)  / nfft;\r\n"
"        for (int i=0;i<nfft;++i)\r\n"
"            dst[i] = exp( std::complex<T_scalar>(0,i*phinc) );\r\n"
"    }\r\n"
"\r\n"
"    void prepare(\r\n"
"            std::vector< std::complex<T_scalar> > & dst,\r\n"
"            int nfft,bool inverse, \r\n"
"            std::vector<int> & stageRadix, \r\n"
"            std::vector<int> & stageRemainder )\r\n"
"    {\r\n"
"        _twiddles.resize(nfft);\r\n"
"        fill_twiddles( &_twiddles[0],nfft,inverse);\r\n"
"        dst = _twiddles;\r\n"
"\r\n"
"        //factorize\r\n"
"        //start factoring out 4's, then 2's, then 3,5,7,9,...\r\n"
"        int n= nfft;\r\n"
"        int p=4;\r\n"
"        do {\r\n"
"            while (n % p) {\r\n"
"                switch (p) {\r\n"
"                    case 4: p = 2; break;\r\n"
"                    case 2: p = 3; break;\r\n"
"                    default: p += 2; break;\r\n"
"                }\r\n"
"                if (p*p>n)\r\n"
"                    p=n;// no more factors\r\n"
"            }\r\n"
"            n /= p;\r\n"
"            stageRadix.push_back(p);\r\n"
"            stageRemainder.push_back(n);\r\n"
"        }while(n>1);\r\n"
"    }\r\n"
"    std::vector<cpx_type> _twiddles;\r\n"
"\r\n"
"\r\n"
"    const cpx_type twiddle(int i) { return _twiddles[i]; }\r\n"
"};\r\n"
"\r\n"
"}\r\n"
"\r\n"
"template <typename T_Scalar,\r\n"
"         typename T_traits=kissfft_utils::traits<T_Scalar> \r\n"
"         >\r\n"
"class kissfft\r\n"
"{\r\n"
"    public:\r\n"
"        typedef T_traits traits_type;\r\n"
"        typedef typename traits_type::scalar_type scalar_type;\r\n"
"        typedef typename traits_type::cpx_type cpx_type;\r\n"
"\r\n"
"        kissfft(int nfft,bool inverse,const traits_type & traits=traits_type() ) \r\n"
"            :_nfft(nfft),_inverse(inverse),_traits(traits)\r\n"
"        {\r\n"
"            _traits.prepare(_twiddles, _nfft,_inverse ,_stageRadix, _stageRemainder);\r\n"
"        }\r\n"
"\r\n"
"        void transform(const cpx_type * src , cpx_type * dst)\r\n"
"        {\r\n"
"            kf_work(0, dst, src, 1,1);\r\n"
"        }\r\n"
"\r\n"
"    private:\r\n"
"        void kf_work( int stage,cpx_type * Fout, const cpx_type * f, size_t fstride,size_t in_stride)\r\n"
"        {\r\n"
"            int p = _stageRadix[stage];\r\n"
"            int m = _stageRemainder[stage];\r\n"
"            cpx_type * Fout_beg = Fout;\r\n"
"            cpx_type * Fout_end = Fout + p*m;\r\n"
"\r\n"
"            if (m==1) {\r\n"
"                do{\r\n"
"                    *Fout = *f;\r\n"
"                    f += fstride*in_stride;\r\n"
"                }while(++Fout != Fout_end );\r\n"
"            }else{\r\n"
"                do{\r\n"
"                    // recursive call:\r\n"
"                    // DFT of size m*p performed by doing\r\n"
"                    // p instances of smaller DFTs of size m, \r\n"
"                    // each one takes a decimated version of the input\r\n"
"                    kf_work(stage+1, Fout , f, fstride*p,in_stride);\r\n"
"                    f += fstride*in_stride;\r\n"
"                }while( (Fout += m) != Fout_end );\r\n"
"            }\r\n"
"\r\n"
"            Fout=Fout_beg;\r\n"
"\r\n"
"            // recombine the p smaller DFTs \r\n"
"            switch (p) {\r\n"
"                case 2: kf_bfly2(Fout,fstride,m); break;\r\n"
"                case 3: kf_bfly3(Fout,fstride,m); break;\r\n"
"                case 4: kf_bfly4(Fout,fstride,m); break;\r\n"
"                case 5: kf_bfly5(Fout,fstride,m); break;\r\n"
"                default: kf_bfly_generic(Fout,fstride,m,p); break;\r\n"
"            }\r\n"
"        }\r\n"
"\r\n"
"        // these were #define macros in the original kiss_fft\r\n"
"        void C_ADD( cpx_type & c,const cpx_type & a,const cpx_type & b) { c=a+b;}\r\n"
"        void C_MUL( cpx_type & c,const cpx_type & a,const cpx_type & b) { c=a*b;}\r\n"
"        void C_SUB( cpx_type & c,const cpx_type & a,const cpx_type & b) { c=a-b;}\r\n"
"        void C_ADDTO( cpx_type & c,const cpx_type & a) { c+=a;}\r\n"
"        void C_FIXDIV( cpx_type & ,int ) {} // NO-OP for float types\r\n"
"        scalar_type S_MUL( const scalar_type & a,const scalar_type & b) { return a*b;}\r\n"
"        scalar_type HALF_OF( const scalar_type & a) { return a*.5;}\r\n"
"        void C_MULBYSCALAR(cpx_type & c,const scalar_type & a) {c*=a;}\r\n"
"\r\n"
"        void kf_bfly2( cpx_type * Fout, const size_t fstride, int m)\r\n"
"        {\r\n"
"            for (int k=0;k<m;++k) {\r\n"
"                cpx_type t = Fout[m+k] * _traits.twiddle(k*fstride);\r\n"
"                Fout[m+k] = Fout[k] - t;\r\n"
"                Fout[k] += t;\r\n"
"            }\r\n"
"        }\r\n"
"\r\n"
"        void kf_bfly4( cpx_type * Fout, const size_t fstride, const size_t m)\r\n"
"        {\r\n"
"            cpx_type scratch[7];\r\n"
"            int negative_if_inverse = _inverse * -2 +1;\r\n"
"            for (size_t k=0;k<m;++k) {\r\n"
"                scratch[0] = Fout[k+m] * _traits.twiddle(k*fstride);\r\n"
"                scratch[1] = Fout[k+2*m] * _traits.twiddle(k*fstride*2);\r\n"
"                scratch[2] = Fout[k+3*m] * _traits.twiddle(k*fstride*3);\r\n"
"                scratch[5] = Fout[k] - scratch[1];\r\n"
"\r\n"
"                Fout[k] += scratch[1];\r\n"
"                scratch[3] = scratch[0] + scratch[2];\r\n"
"                scratch[4] = scratch[0] - scratch[2];\r\n"
"                scratch[4] = cpx_type( scratch[4].imag()*negative_if_inverse , -scratch[4].real()* negative_if_inverse );\r\n"
"\r\n"
"                Fout[k+2*m]  = Fout[k] - scratch[3];\r\n"
"                Fout[k] += scratch[3];\r\n"
"                Fout[k+m] = scratch[5] + scratch[4];\r\n"
"                Fout[k+3*m] = scratch[5] - scratch[4];\r\n"
"            }\r\n"
"        }\r\n"
"\r\n"
"        void kf_bfly3( cpx_type * Fout, const size_t fstride, const size_t m)\r\n"
"        {\r\n"
"            size_t k=m;\r\n"
"            const size_t m2 = 2*m;\r\n"
"            cpx_type *tw1,*tw2;\r\n"
"            cpx_type scratch[5];\r\n"
"            cpx_type epi3;\r\n"
"            epi3 = _twiddles[fstride*m];\r\n"
"\r\n"
"            tw1=tw2=&_twiddles[0];\r\n"
"\r\n"
"            do{\r\n"
"                C_FIXDIV(*Fout,3); C_FIXDIV(Fout[m],3); C_FIXDIV(Fout[m2],3);\r\n"
"\r\n"
"                C_MUL(scratch[1],Fout[m] , *tw1);\r\n"
"                C_MUL(scratch[2],Fout[m2] , *tw2);\r\n"
"\r\n"
"                C_ADD(scratch[3],scratch[1],scratch[2]);\r\n"
"                C_SUB(scratch[0],scratch[1],scratch[2]);\r\n"
"                tw1 += fstride;\r\n"
"                tw2 += fstride*2;\r\n"
"\r\n"
"                Fout[m] = cpx_type( Fout->real() - HALF_OF(scratch[3].real() ) , Fout->imag() - HALF_OF(scratch[3].imag() ) );\r\n"
"\r\n"
"                C_MULBYSCALAR( scratch[0] , epi3.imag() );\r\n"
"\r\n"
"                C_ADDTO(*Fout,scratch[3]);\r\n"
"\r\n"
"                Fout[m2] = cpx_type(  Fout[m].real() + scratch[0].imag() , Fout[m].imag() - scratch[0].real() );\r\n"
"\r\n"
"                C_ADDTO( Fout[m] , cpx_type( -scratch[0].imag(),scratch[0].real() ) );\r\n"
"                ++Fout;\r\n"
"            }while(--k);\r\n"
"        }\r\n"
"\r\n"
"        void kf_bfly5( cpx_type * Fout, const size_t fstride, const size_t m)\r\n"
"        {\r\n"
"            cpx_type *Fout0,*Fout1,*Fout2,*Fout3,*Fout4;\r\n"
"            size_t u;\r\n"
"            cpx_type scratch[13];\r\n"
"            cpx_type * twiddles = &_twiddles[0];\r\n"
"            cpx_type *tw;\r\n"
"            cpx_type ya,yb;\r\n"
"            ya = twiddles[fstride*m];\r\n"
"            yb = twiddles[fstride*2*m];\r\n"
"\r\n"
"            Fout0=Fout;\r\n"
"            Fout1=Fout0+m;\r\n"
"            Fout2=Fout0+2*m;\r\n"
"            Fout3=Fout0+3*m;\r\n"
"            Fout4=Fout0+4*m;\r\n"
"\r\n"
"            tw=twiddles;\r\n"
"            for ( u=0; u<m; ++u ) {\r\n"
"                C_FIXDIV( *Fout0,5); C_FIXDIV( *Fout1,5); C_FIXDIV( *Fout2,5); C_FIXDIV( *Fout3,5); C_FIXDIV( *Fout4,5);\r\n"
"                scratch[0] = *Fout0;\r\n"
"\r\n"
"                C_MUL(scratch[1] ,*Fout1, tw[u*fstride]);\r\n"
"                C_MUL(scratch[2] ,*Fout2, tw[2*u*fstride]);\r\n"
"                C_MUL(scratch[3] ,*Fout3, tw[3*u*fstride]);\r\n"
"                C_MUL(scratch[4] ,*Fout4, tw[4*u*fstride]);\r\n"
"\r\n"
"                C_ADD( scratch[7],scratch[1],scratch[4]);\r\n"
"                C_SUB( scratch[10],scratch[1],scratch[4]);\r\n"
"                C_ADD( scratch[8],scratch[2],scratch[3]);\r\n"
"                C_SUB( scratch[9],scratch[2],scratch[3]);\r\n"
"\r\n"
"                C_ADDTO( *Fout0, scratch[7]);\r\n"
"                C_ADDTO( *Fout0, scratch[8]);\r\n"
"\r\n"
"                scratch[5] = scratch[0] + cpx_type(\r\n"
"                        S_MUL(scratch[7].real(),ya.real() ) + S_MUL(scratch[8].real() ,yb.real() ),\r\n"
"                        S_MUL(scratch[7].imag(),ya.real()) + S_MUL(scratch[8].imag(),yb.real())\r\n"
"                        );\r\n"
"\r\n"
"                scratch[6] =  cpx_type( \r\n"
"                        S_MUL(scratch[10].imag(),ya.imag()) + S_MUL(scratch[9].imag(),yb.imag()),\r\n"
"                        -S_MUL(scratch[10].real(),ya.imag()) - S_MUL(scratch[9].real(),yb.imag()) \r\n"
"                        );\r\n"
"\r\n"
"                C_SUB(*Fout1,scratch[5],scratch[6]);\r\n"
"                C_ADD(*Fout4,scratch[5],scratch[6]);\r\n"
"\r\n"
"                scratch[11] = scratch[0] + \r\n"
"                    cpx_type(\r\n"
"                            S_MUL(scratch[7].real(),yb.real()) + S_MUL(scratch[8].real(),ya.real()),\r\n"
"                            S_MUL(scratch[7].imag(),yb.real()) + S_MUL(scratch[8].imag(),ya.real())\r\n"
"                            );\r\n"
"\r\n"
"                scratch[12] = cpx_type(\r\n"
"                        -S_MUL(scratch[10].imag(),yb.imag()) + S_MUL(scratch[9].imag(),ya.imag()),\r\n"
"                        S_MUL(scratch[10].real(),yb.imag()) - S_MUL(scratch[9].real(),ya.imag())\r\n"
"                        );\r\n"
"\r\n"
"                C_ADD(*Fout2,scratch[11],scratch[12]);\r\n"
"                C_SUB(*Fout3,scratch[11],scratch[12]);\r\n"
"\r\n"
"                ++Fout0;++Fout1;++Fout2;++Fout3;++Fout4;\r\n"
"            }\r\n"
"        }\r\n"
"\r\n"
"        /* perform the butterfly for one stage of a mixed radix FFT */\r\n"
"        void kf_bfly_generic(\r\n"
"                cpx_type * Fout,\r\n"
"                const size_t fstride,\r\n"
"                int m,\r\n"
"                int p\r\n"
"                )\r\n"
"        {\r\n"
"            int u,k,q1,q;\r\n"
"            cpx_type * twiddles = &_twiddles[0];\r\n"
"            cpx_type t;\r\n"
"            int Norig = _nfft;\r\n"
"            cpx_type scratchbuf[p];\r\n"
"\r\n"
"            for ( u=0; u<m; ++u ) {\r\n"
"                k=u;\r\n"
"                for ( q1=0 ; q1<p ; ++q1 ) {\r\n"
"                    scratchbuf[q1] = Fout[ k  ];\r\n"
"                    C_FIXDIV(scratchbuf[q1],p);\r\n"
"                    k += m;\r\n"
"                }\r\n"
"\r\n"
"                k=u;\r\n"
"                for ( q1=0 ; q1<p ; ++q1 ) {\r\n"
"                    int twidx=0;\r\n"
"                    Fout[ k ] = scratchbuf[0];\r\n"
"                    for (q=1;q<p;++q ) {\r\n"
"                        twidx += fstride * k;\r\n"
"                        if (twidx>=Norig) twidx-=Norig;\r\n"
"                        C_MUL(t,scratchbuf[q] , twiddles[twidx] );\r\n"
"                        C_ADDTO( Fout[ k ] ,t);\r\n"
"                    }\r\n"
"                    k += m;\r\n"
"                }\r\n"
"            }\r\n"
"        }\r\n"
"\r\n"
"        int _nfft;\r\n"
"        bool _inverse;\r\n"
"        std::vector<cpx_type> _twiddles;\r\n"
"        std::vector<int> _stageRadix;\r\n"
"        std::vector<int> _stageRemainder;\r\n"
"        traits_type _traits;\r\n"
"};\r\n"
"#endif\r\n";

const char* kissfft_hh = (const char*) temp_binary_data_3;


const char* getNamedResource (const char* resourceNameUTF8, int& numBytes);
const char* getNamedResource (const char* resourceNameUTF8, int& numBytes)
{
    unsigned int hash = 0;

    if (resourceNameUTF8 != nullptr)
        while (*resourceNameUTF8 != 0)
            hash = 31 * hash + (unsigned int) *resourceNameUTF8++;

    switch (hash)
    {
        case 0x94bff7e3:  numBytes = 5962; return _kiss_fft_guts_h;
        case 0x00417357:  numBytes = 13068; return kiss_fft_c;
        case 0x0041735c:  numBytes = 3425; return kiss_fft_h;
        case 0x0c396f29:  numBytes = 10920; return kissfft_hh;
        default: break;
    }

    numBytes = 0;
    return nullptr;
}

const char* namedResourceList[] =
{
    "_kiss_fft_guts_h",
    "kiss_fft_c",
    "kiss_fft_h",
    "kissfft_hh"
};

const char* originalFilenames[] =
{
    "_kiss_fft_guts.h",
    "kiss_fft.c",
    "kiss_fft.h",
    "kissfft.hh"
};

const char* getNamedResourceOriginalFilename (const char* resourceNameUTF8);
const char* getNamedResourceOriginalFilename (const char* resourceNameUTF8)
{
    for (unsigned int i = 0; i < (sizeof (namedResourceList) / sizeof (namedResourceList[0])); ++i)
        if (strcmp (namedResourceList[i], resourceNameUTF8) == 0)
            return originalFilenames[i];

    return nullptr;
}

}
